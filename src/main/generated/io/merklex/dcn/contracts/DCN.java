package io.merklex.dcn.contracts;

import org.web3j.abi.*;
import org.web3j.abi.datatypes.*;
import org.web3j.abi.datatypes.generated.*;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameterName;
import org.web3j.protocol.core.methods.request.Transaction;
import org.web3j.protocol.core.methods.request.Transaction;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.tx.Contract;
import java.io.IOException;
import java.math.BigInteger;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.web3j.utils.Numeric;

@javax.annotation.Generated(value="merklex-code-gen")
public class DCN {
    public static final String BINARY = "";
    public static Function user_deposit_to_session(long user_id, int exchange_id, int asset_id, long quantity) {
        return new Function(
            "user_deposit_to_session",
            Arrays.asList(
                new UnsignedNumberType(64, user_id)
                , new UnsignedNumberType(32, exchange_id)
                , new UnsignedNumberType(32, asset_id)
                , new UnsignedNumberType(64, quantity)
            ),
            Collections.emptyList()
        );
    }
    public static Function user_set_trade_address(long user_id, String trade_address) {
        return new Function(
            "user_set_trade_address",
            Arrays.asList(
                new UnsignedNumberType(64, user_id)
                , new org.web3j.abi.datatypes.Address(trade_address)
            ),
            Collections.emptyList()
        );
    }
    public static Function security_propose(BigInteger proposed_locked_features) {
        return new Function(
            "security_propose",
            Collections.singletonList(
                new UnsignedNumberType(256, proposed_locked_features)
            ),
            Collections.emptyList()
        );
    }
    public static Function exchange_apply_settlement_groups(String data) {
        return new Function(
            "exchange_apply_settlement_groups",
            Collections.singletonList(
                new org.web3j.abi.datatypes.DynamicBytes(Numeric.hexStringToByteArray(data))
            ),
            Collections.emptyList()
        );
    }
    public static Function add_exchange(String name, String addr) {
        return new Function(
            "add_exchange",
            Arrays.asList(
                new org.web3j.abi.datatypes.Utf8String(name)
                , new org.web3j.abi.datatypes.Address(addr)
            ),
            Collections.emptyList()
        );
    }
    public static Function user_market_reset(long user_id, int exchange_id, int quote_asset_id, int base_asset_id) {
        return new Function(
            "user_market_reset",
            Arrays.asList(
                new UnsignedNumberType(64, user_id)
                , new UnsignedNumberType(32, exchange_id)
                , new UnsignedNumberType(32, quote_asset_id)
                , new UnsignedNumberType(32, base_asset_id)
            ),
            Collections.emptyList()
        );
    }
    public static Function security_lock(BigInteger lock_features) {
        return new Function(
            "security_lock",
            Collections.singletonList(
                new UnsignedNumberType(256, lock_features)
            ),
            Collections.emptyList()
        );
    }
    public static Function user_create() {
        return new Function(
            "user_create",
            Collections.emptyList(),
            Collections.emptyList()
        );
    }
    public static Function user_set_recovery_address(long user_id) {
        return new Function(
            "user_set_recovery_address",
            Collections.singletonList(
                new UnsignedNumberType(64, user_id)
            ),
            Collections.emptyList()
        );
    }
    public static Function creator_propose_recovery(String recovery) {
        return new Function(
            "creator_propose_recovery",
            Collections.singletonList(
                new org.web3j.abi.datatypes.Address(recovery)
            ),
            Collections.emptyList()
        );
    }
    public static Function get_session_balance(long user_id, int exchange_id, int asset_id) {
        return new Function(
            "get_session_balance",
            Arrays.asList(
                new UnsignedNumberType(64, user_id)
                , new UnsignedNumberType(32, exchange_id)
                , new UnsignedNumberType(32, asset_id)
            ),
            Arrays.asList(
                new TypeReference<org.web3j.abi.datatypes.generated.Uint128>() {}
                , new TypeReference<org.web3j.abi.datatypes.generated.Uint64>() {}
                , new TypeReference<org.web3j.abi.datatypes.generated.Uint64>() {}
            )
        );
    }
    public static GetSessionBalanceReturnValue query_get_session_balance(String contractAddress, Web3j web3j, Function function) throws IOException {
        String encodedFunction = FunctionEncoder.encode(function);
        org.web3j.protocol.core.methods.response.EthCall ethCall = web3j.ethCall(
            Transaction.createEthCallTransaction("0x0000000000000000000000000000000000000000", contractAddress, encodedFunction),
            DefaultBlockParameterName.LATEST
        ).send();
        String value = ethCall.getValue();
        List<Type> values = FunctionReturnDecoder.decode(value, function.getOutputParameters());
        GetSessionBalanceReturnValue returnValue = new GetSessionBalanceReturnValue();
        returnValue.total_deposit = (BigInteger) values.get(0).getValue();
        returnValue.unsettled_withdraw_total = ((BigInteger) values.get(1).getValue()).longValue();
        returnValue.asset_balance = ((BigInteger) values.get(2).getValue()).longValue();
        return returnValue;
    }
    public static Function exchange_transfer_from(String data) {
        return new Function(
            "exchange_transfer_from",
            Collections.singletonList(
                new org.web3j.abi.datatypes.DynamicBytes(Numeric.hexStringToByteArray(data))
            ),
            Collections.emptyList()
        );
    }
    public static Function get_exchange_count() {
        return new Function(
            "get_exchange_count",
            Collections.emptyList(),
            Collections.singletonList(
                new TypeReference<org.web3j.abi.datatypes.generated.Uint32>() {}
            )
        );
    }
    public static GetExchangeCountReturnValue query_get_exchange_count(String contractAddress, Web3j web3j, Function function) throws IOException {
        String encodedFunction = FunctionEncoder.encode(function);
        org.web3j.protocol.core.methods.response.EthCall ethCall = web3j.ethCall(
            Transaction.createEthCallTransaction("0x0000000000000000000000000000000000000000", contractAddress, encodedFunction),
            DefaultBlockParameterName.LATEST
        ).send();
        String value = ethCall.getValue();
        List<Type> values = FunctionReturnDecoder.decode(value, function.getOutputParameters());
        GetExchangeCountReturnValue returnValue = new GetExchangeCountReturnValue();
        returnValue.count = ((BigInteger) values.get(0).getValue()).intValue();
        return returnValue;
    }
    public static Function get_exchange(int exchange_id) {
        return new Function(
            "get_exchange",
            Collections.singletonList(
                new UnsignedNumberType(32, exchange_id)
            ),
            Arrays.asList(
                new TypeReference<org.web3j.abi.datatypes.Utf8String>() {}
                , new TypeReference<org.web3j.abi.datatypes.Bool>() {}
                , new TypeReference<org.web3j.abi.datatypes.Address>() {}
                , new TypeReference<org.web3j.abi.datatypes.Address>() {}
                , new TypeReference<org.web3j.abi.datatypes.Address>() {}
            )
        );
    }
    public static GetExchangeReturnValue query_get_exchange(String contractAddress, Web3j web3j, Function function) throws IOException {
        String encodedFunction = FunctionEncoder.encode(function);
        org.web3j.protocol.core.methods.response.EthCall ethCall = web3j.ethCall(
            Transaction.createEthCallTransaction("0x0000000000000000000000000000000000000000", contractAddress, encodedFunction),
            DefaultBlockParameterName.LATEST
        ).send();
        String value = ethCall.getValue();
        List<Type> values = FunctionReturnDecoder.decode(value, function.getOutputParameters());
        GetExchangeReturnValue returnValue = new GetExchangeReturnValue();
        returnValue.name = (String) values.get(0).getValue();
        returnValue.locked = (Boolean) values.get(1).getValue();
        returnValue.owner = (String) values.get(2).getValue();
        returnValue.recovery_address = (String) values.get(3).getValue();
        returnValue.recovery_address_proposed = (String) values.get(4).getValue();
        return returnValue;
    }
    public static Function security_set_proposed() {
        return new Function(
            "security_set_proposed",
            Collections.emptyList(),
            Collections.emptyList()
        );
    }
    public static Function transfer_to_session(long user_id, int exchange_id, int asset_id, long quantity) {
        return new Function(
            "transfer_to_session",
            Arrays.asList(
                new UnsignedNumberType(64, user_id)
                , new UnsignedNumberType(32, exchange_id)
                , new UnsignedNumberType(32, asset_id)
                , new UnsignedNumberType(64, quantity)
            ),
            Collections.emptyList()
        );
    }
    public static Function get_session(long user_id, int exchange_id) {
        return new Function(
            "get_session",
            Arrays.asList(
                new UnsignedNumberType(64, user_id)
                , new UnsignedNumberType(32, exchange_id)
            ),
            Arrays.asList(
                new TypeReference<org.web3j.abi.datatypes.generated.Uint256>() {}
                , new TypeReference<org.web3j.abi.datatypes.Address>() {}
            )
        );
    }
    public static GetSessionReturnValue query_get_session(String contractAddress, Web3j web3j, Function function) throws IOException {
        String encodedFunction = FunctionEncoder.encode(function);
        org.web3j.protocol.core.methods.response.EthCall ethCall = web3j.ethCall(
            Transaction.createEthCallTransaction("0x0000000000000000000000000000000000000000", contractAddress, encodedFunction),
            DefaultBlockParameterName.LATEST
        ).send();
        String value = ethCall.getValue();
        List<Type> values = FunctionReturnDecoder.decode(value, function.getOutputParameters());
        GetSessionReturnValue returnValue = new GetSessionReturnValue();
        returnValue.unlock_at = (BigInteger) values.get(0).getValue();
        returnValue.trade_address = (String) values.get(1).getValue();
        return returnValue;
    }
    public static Function add_asset(String symbol, long unit_scale, String contract_address) {
        return new Function(
            "add_asset",
            Arrays.asList(
                new org.web3j.abi.datatypes.Utf8String(symbol)
                , new UnsignedNumberType(64, unit_scale)
                , new org.web3j.abi.datatypes.Address(contract_address)
            ),
            Collections.emptyList()
        );
    }
    public static Function get_user(long user_id) {
        return new Function(
            "get_user",
            Collections.singletonList(
                new UnsignedNumberType(64, user_id)
            ),
            Arrays.asList(
                new TypeReference<org.web3j.abi.datatypes.Address>() {}
                , new TypeReference<org.web3j.abi.datatypes.Address>() {}
                , new TypeReference<org.web3j.abi.datatypes.Address>() {}
                , new TypeReference<org.web3j.abi.datatypes.Address>() {}
            )
        );
    }
    public static GetUserReturnValue query_get_user(String contractAddress, Web3j web3j, Function function) throws IOException {
        String encodedFunction = FunctionEncoder.encode(function);
        org.web3j.protocol.core.methods.response.EthCall ethCall = web3j.ethCall(
            Transaction.createEthCallTransaction("0x0000000000000000000000000000000000000000", contractAddress, encodedFunction),
            DefaultBlockParameterName.LATEST
        ).send();
        String value = ethCall.getValue();
        List<Type> values = FunctionReturnDecoder.decode(value, function.getOutputParameters());
        GetUserReturnValue returnValue = new GetUserReturnValue();
        returnValue.trade_address = (String) values.get(0).getValue();
        returnValue.withdraw_address = (String) values.get(1).getValue();
        returnValue.recovery_address = (String) values.get(2).getValue();
        returnValue.recovery_address_proposed = (String) values.get(3).getValue();
        return returnValue;
    }
    public static Function creator_set_recovery() {
        return new Function(
            "creator_set_recovery",
            Collections.emptyList(),
            Collections.emptyList()
        );
    }
    public static Function transfer_from_session(long user_id, int exchange_id, int asset_id, long quantity) {
        return new Function(
            "transfer_from_session",
            Arrays.asList(
                new UnsignedNumberType(64, user_id)
                , new UnsignedNumberType(32, exchange_id)
                , new UnsignedNumberType(32, asset_id)
                , new UnsignedNumberType(64, quantity)
            ),
            Collections.emptyList()
        );
    }
    public static Function creator_update(String new_creator) {
        return new Function(
            "creator_update",
            Collections.singletonList(
                new org.web3j.abi.datatypes.Address(new_creator)
            ),
            Collections.emptyList()
        );
    }
    public static Function user_propose_recovery_address(long user_id, String proposed) {
        return new Function(
            "user_propose_recovery_address",
            Arrays.asList(
                new UnsignedNumberType(64, user_id)
                , new org.web3j.abi.datatypes.Address(proposed)
            ),
            Collections.emptyList()
        );
    }
    public static Function get_asset(int asset_id) {
        return new Function(
            "get_asset",
            Collections.singletonList(
                new UnsignedNumberType(32, asset_id)
            ),
            Arrays.asList(
                new TypeReference<org.web3j.abi.datatypes.Utf8String>() {}
                , new TypeReference<org.web3j.abi.datatypes.generated.Uint64>() {}
                , new TypeReference<org.web3j.abi.datatypes.Address>() {}
            )
        );
    }
    public static GetAssetReturnValue query_get_asset(String contractAddress, Web3j web3j, Function function) throws IOException {
        String encodedFunction = FunctionEncoder.encode(function);
        org.web3j.protocol.core.methods.response.EthCall ethCall = web3j.ethCall(
            Transaction.createEthCallTransaction("0x0000000000000000000000000000000000000000", contractAddress, encodedFunction),
            DefaultBlockParameterName.LATEST
        ).send();
        String value = ethCall.getValue();
        List<Type> values = FunctionReturnDecoder.decode(value, function.getOutputParameters());
        GetAssetReturnValue returnValue = new GetAssetReturnValue();
        returnValue.symbol = (String) values.get(0).getValue();
        returnValue.unit_scale = ((BigInteger) values.get(1).getValue()).longValue();
        returnValue.contract_address = (String) values.get(2).getValue();
        return returnValue;
    }
    public static Function recover_unsettled_withdraws(String data) {
        return new Function(
            "recover_unsettled_withdraws",
            Collections.singletonList(
                new org.web3j.abi.datatypes.DynamicBytes(Numeric.hexStringToByteArray(data))
            ),
            Collections.emptyList()
        );
    }
    public static Function get_asset_count() {
        return new Function(
            "get_asset_count",
            Collections.emptyList(),
            Collections.singletonList(
                new TypeReference<org.web3j.abi.datatypes.generated.Uint32>() {}
            )
        );
    }
    public static GetAssetCountReturnValue query_get_asset_count(String contractAddress, Web3j web3j, Function function) throws IOException {
        String encodedFunction = FunctionEncoder.encode(function);
        org.web3j.protocol.core.methods.response.EthCall ethCall = web3j.ethCall(
            Transaction.createEthCallTransaction("0x0000000000000000000000000000000000000000", contractAddress, encodedFunction),
            DefaultBlockParameterName.LATEST
        ).send();
        String value = ethCall.getValue();
        List<Type> values = FunctionReturnDecoder.decode(value, function.getOutputParameters());
        GetAssetCountReturnValue returnValue = new GetAssetCountReturnValue();
        returnValue.count = ((BigInteger) values.get(0).getValue()).intValue();
        return returnValue;
    }
    public static Function get_creator() {
        return new Function(
            "get_creator",
            Collections.emptyList(),
            Arrays.asList(
                new TypeReference<org.web3j.abi.datatypes.Address>() {}
                , new TypeReference<org.web3j.abi.datatypes.Address>() {}
                , new TypeReference<org.web3j.abi.datatypes.Address>() {}
            )
        );
    }
    public static GetCreatorReturnValue query_get_creator(String contractAddress, Web3j web3j, Function function) throws IOException {
        String encodedFunction = FunctionEncoder.encode(function);
        org.web3j.protocol.core.methods.response.EthCall ethCall = web3j.ethCall(
            Transaction.createEthCallTransaction("0x0000000000000000000000000000000000000000", contractAddress, encodedFunction),
            DefaultBlockParameterName.LATEST
        ).send();
        String value = ethCall.getValue();
        List<Type> values = FunctionReturnDecoder.decode(value, function.getOutputParameters());
        GetCreatorReturnValue returnValue = new GetCreatorReturnValue();
        returnValue.dcn_creator = (String) values.get(0).getValue();
        returnValue.dcn_creator_recovery = (String) values.get(1).getValue();
        returnValue.dcn_creator_recovery_proposed = (String) values.get(2).getValue();
        return returnValue;
    }
    public static Function get_market_state(long user_id, int exchange_id, int quote_asset_id, int base_asset_id) {
        return new Function(
            "get_market_state",
            Arrays.asList(
                new UnsignedNumberType(64, user_id)
                , new UnsignedNumberType(32, exchange_id)
                , new UnsignedNumberType(32, quote_asset_id)
                , new UnsignedNumberType(32, base_asset_id)
            ),
            Arrays.asList(
                new TypeReference<org.web3j.abi.datatypes.generated.Int64>() {}
                , new TypeReference<org.web3j.abi.datatypes.generated.Int64>() {}
                , new TypeReference<org.web3j.abi.datatypes.generated.Uint64>() {}
                , new TypeReference<org.web3j.abi.datatypes.generated.Uint64>() {}
                , new TypeReference<org.web3j.abi.datatypes.generated.Int64>() {}
                , new TypeReference<org.web3j.abi.datatypes.generated.Int64>() {}
                , new TypeReference<org.web3j.abi.datatypes.generated.Uint64>() {}
                , new TypeReference<org.web3j.abi.datatypes.generated.Uint64>() {}
                , new TypeReference<org.web3j.abi.datatypes.generated.Uint64>() {}
                , new TypeReference<org.web3j.abi.datatypes.generated.Int96>() {}
                , new TypeReference<org.web3j.abi.datatypes.generated.Int96>() {}
            )
        );
    }
    public static GetMarketStateReturnValue query_get_market_state(String contractAddress, Web3j web3j, Function function) throws IOException {
        String encodedFunction = FunctionEncoder.encode(function);
        org.web3j.protocol.core.methods.response.EthCall ethCall = web3j.ethCall(
            Transaction.createEthCallTransaction("0x0000000000000000000000000000000000000000", contractAddress, encodedFunction),
            DefaultBlockParameterName.LATEST
        ).send();
        String value = ethCall.getValue();
        List<Type> values = FunctionReturnDecoder.decode(value, function.getOutputParameters());
        GetMarketStateReturnValue returnValue = new GetMarketStateReturnValue();
        returnValue.quote_qty = ((BigInteger) values.get(0).getValue()).longValue();
        returnValue.base_qty = ((BigInteger) values.get(1).getValue()).longValue();
        returnValue.fee_used = ((BigInteger) values.get(2).getValue()).longValue();
        returnValue.fee_limit = ((BigInteger) values.get(3).getValue()).longValue();
        returnValue.min_quote_qty = ((BigInteger) values.get(4).getValue()).longValue();
        returnValue.min_base_qty = ((BigInteger) values.get(5).getValue()).longValue();
        returnValue.long_max_price = ((BigInteger) values.get(6).getValue()).longValue();
        returnValue.short_min_price = ((BigInteger) values.get(7).getValue()).longValue();
        returnValue.limit_version = ((BigInteger) values.get(8).getValue()).longValue();
        returnValue.quote_shift = (BigInteger) values.get(9).getValue();
        returnValue.base_shift = (BigInteger) values.get(10).getValue();
        return returnValue;
    }
    public static Function set_exchange_locked(int exchange_id, boolean locked) {
        return new Function(
            "set_exchange_locked",
            Arrays.asList(
                new UnsignedNumberType(32, exchange_id)
                , new org.web3j.abi.datatypes.Bool(locked)
            ),
            Collections.emptyList()
        );
    }
    public static Function get_balance(long user_id, int asset_id) {
        return new Function(
            "get_balance",
            Arrays.asList(
                new UnsignedNumberType(64, user_id)
                , new UnsignedNumberType(32, asset_id)
            ),
            Collections.singletonList(
                new TypeReference<org.web3j.abi.datatypes.generated.Uint256>() {}
            )
        );
    }
    public static GetBalanceReturnValue query_get_balance(String contractAddress, Web3j web3j, Function function) throws IOException {
        String encodedFunction = FunctionEncoder.encode(function);
        org.web3j.protocol.core.methods.response.EthCall ethCall = web3j.ethCall(
            Transaction.createEthCallTransaction("0x0000000000000000000000000000000000000000", contractAddress, encodedFunction),
            DefaultBlockParameterName.LATEST
        ).send();
        String value = ethCall.getValue();
        List<Type> values = FunctionReturnDecoder.decode(value, function.getOutputParameters());
        GetBalanceReturnValue returnValue = new GetBalanceReturnValue();
        returnValue.return_balance = (BigInteger) values.get(0).getValue();
        return returnValue;
    }
    public static Function exchange_set_recovery(int exchange_id) {
        return new Function(
            "exchange_set_recovery",
            Collections.singletonList(
                new UnsignedNumberType(32, exchange_id)
            ),
            Collections.emptyList()
        );
    }
    public static Function get_security_state() {
        return new Function(
            "get_security_state",
            Collections.emptyList(),
            Arrays.asList(
                new TypeReference<org.web3j.abi.datatypes.generated.Uint256>() {}
                , new TypeReference<org.web3j.abi.datatypes.generated.Uint256>() {}
                , new TypeReference<org.web3j.abi.datatypes.generated.Uint256>() {}
            )
        );
    }
    public static GetSecurityStateReturnValue query_get_security_state(String contractAddress, Web3j web3j, Function function) throws IOException {
        String encodedFunction = FunctionEncoder.encode(function);
        org.web3j.protocol.core.methods.response.EthCall ethCall = web3j.ethCall(
            Transaction.createEthCallTransaction("0x0000000000000000000000000000000000000000", contractAddress, encodedFunction),
            DefaultBlockParameterName.LATEST
        ).send();
        String value = ethCall.getValue();
        List<Type> values = FunctionReturnDecoder.decode(value, function.getOutputParameters());
        GetSecurityStateReturnValue returnValue = new GetSecurityStateReturnValue();
        returnValue.locked_features = (BigInteger) values.get(0).getValue();
        returnValue.locked_features_proposed = (BigInteger) values.get(1).getValue();
        returnValue.proposed_unlock_timestamp = (BigInteger) values.get(2).getValue();
        return returnValue;
    }
    public static Function user_deposit(long user_id, int asset_id, BigInteger amount) {
        return new Function(
            "user_deposit",
            Arrays.asList(
                new UnsignedNumberType(64, user_id)
                , new UnsignedNumberType(32, asset_id)
                , new UnsignedNumberType(256, amount)
            ),
            Collections.emptyList()
        );
    }
    public static Function exchange_deposit(int exchange_id, int asset_id, long quantity) {
        return new Function(
            "exchange_deposit",
            Arrays.asList(
                new UnsignedNumberType(32, exchange_id)
                , new UnsignedNumberType(32, asset_id)
                , new UnsignedNumberType(64, quantity)
            ),
            Collections.emptyList()
        );
    }
    public static Function exchange_set_owner(int exchange_id, String new_owner) {
        return new Function(
            "exchange_set_owner",
            Arrays.asList(
                new UnsignedNumberType(32, exchange_id)
                , new org.web3j.abi.datatypes.Address(new_owner)
            ),
            Collections.emptyList()
        );
    }
    public static Function exchange_set_limits(String data) {
        return new Function(
            "exchange_set_limits",
            Collections.singletonList(
                new org.web3j.abi.datatypes.DynamicBytes(Numeric.hexStringToByteArray(data))
            ),
            Collections.emptyList()
        );
    }
    public static Function user_set_withdraw_address(long user_id, String withdraw_address) {
        return new Function(
            "user_set_withdraw_address",
            Arrays.asList(
                new UnsignedNumberType(64, user_id)
                , new org.web3j.abi.datatypes.Address(withdraw_address)
            ),
            Collections.emptyList()
        );
    }
    public static Function exchange_withdraw(int exchange_id, int asset_id, String destination, long quantity) {
        return new Function(
            "exchange_withdraw",
            Arrays.asList(
                new UnsignedNumberType(32, exchange_id)
                , new UnsignedNumberType(32, asset_id)
                , new org.web3j.abi.datatypes.Address(destination)
                , new UnsignedNumberType(64, quantity)
            ),
            Collections.emptyList()
        );
    }
    public static Function user_withdraw(long user_id, int asset_id, String destination, BigInteger amount) {
        return new Function(
            "user_withdraw",
            Arrays.asList(
                new UnsignedNumberType(64, user_id)
                , new UnsignedNumberType(32, asset_id)
                , new org.web3j.abi.datatypes.Address(destination)
                , new UnsignedNumberType(256, amount)
            ),
            Collections.emptyList()
        );
    }
    public static Function user_session_set_unlock_at(long user_id, int exchange_id, BigInteger unlock_at) {
        return new Function(
            "user_session_set_unlock_at",
            Arrays.asList(
                new UnsignedNumberType(64, user_id)
                , new UnsignedNumberType(32, exchange_id)
                , new UnsignedNumberType(256, unlock_at)
            ),
            Collections.emptyList()
        );
    }
    public static Function get_exchange_balance(int exchange_id, int asset_id) {
        return new Function(
            "get_exchange_balance",
            Arrays.asList(
                new UnsignedNumberType(32, exchange_id)
                , new UnsignedNumberType(32, asset_id)
            ),
            Collections.singletonList(
                new TypeReference<org.web3j.abi.datatypes.generated.Uint256>() {}
            )
        );
    }
    public static GetExchangeBalanceReturnValue query_get_exchange_balance(String contractAddress, Web3j web3j, Function function) throws IOException {
        String encodedFunction = FunctionEncoder.encode(function);
        org.web3j.protocol.core.methods.response.EthCall ethCall = web3j.ethCall(
            Transaction.createEthCallTransaction("0x0000000000000000000000000000000000000000", contractAddress, encodedFunction),
            DefaultBlockParameterName.LATEST
        ).send();
        String value = ethCall.getValue();
        List<Type> values = FunctionReturnDecoder.decode(value, function.getOutputParameters());
        GetExchangeBalanceReturnValue returnValue = new GetExchangeBalanceReturnValue();
        returnValue.exchange_balance = (BigInteger) values.get(0).getValue();
        return returnValue;
    }
    public static Function get_user_count() {
        return new Function(
            "get_user_count",
            Collections.emptyList(),
            Collections.singletonList(
                new TypeReference<org.web3j.abi.datatypes.generated.Uint32>() {}
            )
        );
    }
    public static GetUserCountReturnValue query_get_user_count(String contractAddress, Web3j web3j, Function function) throws IOException {
        String encodedFunction = FunctionEncoder.encode(function);
        org.web3j.protocol.core.methods.response.EthCall ethCall = web3j.ethCall(
            Transaction.createEthCallTransaction("0x0000000000000000000000000000000000000000", contractAddress, encodedFunction),
            DefaultBlockParameterName.LATEST
        ).send();
        String value = ethCall.getValue();
        List<Type> values = FunctionReturnDecoder.decode(value, function.getOutputParameters());
        GetUserCountReturnValue returnValue = new GetUserCountReturnValue();
        returnValue.count = ((BigInteger) values.get(0).getValue()).intValue();
        return returnValue;
    }
    public static Function exchange_propose_recovery(int exchange_id, String proposed) {
        return new Function(
            "exchange_propose_recovery",
            Arrays.asList(
                new UnsignedNumberType(32, exchange_id)
                , new org.web3j.abi.datatypes.Address(proposed)
            ),
            Collections.emptyList()
        );
    }
    public static String DeployData() {
        String encodedConstructor = FunctionEncoder.encodeConstructor(
            Collections.emptyList()
        );
        return BINARY + encodedConstructor;
    }
    public static class UserCreated {
        public long user_id;
    }
    public static final Event UserCreated_EVENT = new Event("UserCreated",
        Collections.singletonList(
            new TypeReference<org.web3j.abi.datatypes.generated.Uint64>() {}
        )
    );
    public static final String UserCreated_EVENT_HASH = EventEncoder.encode(UserCreated_EVENT);
    public static UserCreated ExtractUserCreated(Log log) {
        List<String> topics = log.getTopics();
        if (topics.size() == 0 || !UserCreated_EVENT_HASH.equals(topics.get(0))) {
            return null;
        }
        EventValues values = Contract.staticExtractEventParameters(UserCreated_EVENT, log);
        UserCreated event = new UserCreated();
        event.user_id = ((BigInteger) values.getNonIndexedValues().get(0).getValue()).longValue();
        return event;
    }
    public static class SessionUpdated {
        public long user_id;
        public long exchange_id;
    }
    public static final Event SessionUpdated_EVENT = new Event("SessionUpdated",
        Arrays.asList(
            new TypeReference<org.web3j.abi.datatypes.generated.Uint64>() {}
            , new TypeReference<org.web3j.abi.datatypes.generated.Uint64>() {}
        )
    );
    public static final String SessionUpdated_EVENT_HASH = EventEncoder.encode(SessionUpdated_EVENT);
    public static SessionUpdated ExtractSessionUpdated(Log log) {
        List<String> topics = log.getTopics();
        if (topics.size() == 0 || !SessionUpdated_EVENT_HASH.equals(topics.get(0))) {
            return null;
        }
        EventValues values = Contract.staticExtractEventParameters(SessionUpdated_EVENT, log);
        SessionUpdated event = new SessionUpdated();
        event.user_id = ((BigInteger) values.getNonIndexedValues().get(0).getValue()).longValue();
        event.exchange_id = ((BigInteger) values.getNonIndexedValues().get(1).getValue()).longValue();
        return event;
    }
    public static class ExchangeDeposit {
        public long user_id;
        public long exchange_id;
        public int asset_id;
    }
    public static final Event ExchangeDeposit_EVENT = new Event("ExchangeDeposit",
        Arrays.asList(
            new TypeReference<org.web3j.abi.datatypes.generated.Uint64>() {}
            , new TypeReference<org.web3j.abi.datatypes.generated.Uint64>() {}
            , new TypeReference<org.web3j.abi.datatypes.generated.Uint32>() {}
        )
    );
    public static final String ExchangeDeposit_EVENT_HASH = EventEncoder.encode(ExchangeDeposit_EVENT);
    public static ExchangeDeposit ExtractExchangeDeposit(Log log) {
        List<String> topics = log.getTopics();
        if (topics.size() == 0 || !ExchangeDeposit_EVENT_HASH.equals(topics.get(0))) {
            return null;
        }
        EventValues values = Contract.staticExtractEventParameters(ExchangeDeposit_EVENT, log);
        ExchangeDeposit event = new ExchangeDeposit();
        event.user_id = ((BigInteger) values.getNonIndexedValues().get(0).getValue()).longValue();
        event.exchange_id = ((BigInteger) values.getNonIndexedValues().get(1).getValue()).longValue();
        event.asset_id = ((BigInteger) values.getNonIndexedValues().get(2).getValue()).intValue();
        return event;
    }
    public static class GetSessionBalanceReturnValue {
        public BigInteger total_deposit;
        public long unsettled_withdraw_total;
        public long asset_balance;
    }
    public static class GetExchangeCountReturnValue {
        public int count;
    }
    public static class GetExchangeReturnValue {
        public String name;
        public boolean locked;
        public String owner;
        public String recovery_address;
        public String recovery_address_proposed;
    }
    public static class GetSessionReturnValue {
        public BigInteger unlock_at;
        public String trade_address;
    }
    public static class GetUserReturnValue {
        public String trade_address;
        public String withdraw_address;
        public String recovery_address;
        public String recovery_address_proposed;
    }
    public static class GetAssetReturnValue {
        public String symbol;
        public long unit_scale;
        public String contract_address;
    }
    public static class GetAssetCountReturnValue {
        public int count;
    }
    public static class GetCreatorReturnValue {
        public String dcn_creator;
        public String dcn_creator_recovery;
        public String dcn_creator_recovery_proposed;
    }
    public static class GetMarketStateReturnValue {
        public long quote_qty;
        public long base_qty;
        public long fee_used;
        public long fee_limit;
        public long min_quote_qty;
        public long min_base_qty;
        public long long_max_price;
        public long short_min_price;
        public long limit_version;
        public BigInteger quote_shift;
        public BigInteger base_shift;
    }
    public static class GetBalanceReturnValue {
        public BigInteger return_balance;
    }
    public static class GetSecurityStateReturnValue {
        public BigInteger locked_features;
        public BigInteger locked_features_proposed;
        public BigInteger proposed_unlock_timestamp;
    }
    public static class GetExchangeBalanceReturnValue {
        public BigInteger exchange_balance;
    }
    public static class GetUserCountReturnValue {
        public int count;
    }
}
